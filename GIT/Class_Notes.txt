	
#######################
Day 2 : 17th Dec. 2024
#######################		

Version Control System Using GIT ::: Source Code Repository(GITHUB)

	Lab :::
	
		1. Create GITHUB Account -- Maintain the Documents/Source Code
		
			https://github.com/	
			
			
		2. Create AWS Cloud Free Tier Account - 12 Months 
		
			https://aws.amazon.com/console/
		
			- Active Email_ID,Mobile_Number,Credit/Debit Card
			
			- Create Virtual Machines(EC2 Instances)
			
			
		3. DockerHub Account 
		
			https://hub.docker.com/
		
		
Version Control System Using GIT ::: Source Code Repository(GITHUB)			
		
Overview of Version Control System :::

	Version Control System :
	
		- Is used to Version Control the Source Code Changes.

		- Is used to track the Source Code Changes.
	

	Create Project Folder 
	
	Java_Web_APP_Project - Folder/Workspace 
	
		- src
			- main
				*.java 
			- test 
				*.java
		- resource 
			- index.html
			- *.css 
			- *.js 		
		- target 
			- *.war


	index.html
	
	------
	-
	--
	
	-
	-
	-
	-
	
	save as index.html & Unit Testing 
	
	Edit index.html 
	
	------
	-
	--
	asdfasdf
	-asdf
	-
	-asdf
	-	
	
	save as index.html & Unit Testing 
	
		Using Version Control System :
		
			index.html				index.html_v1.0			# v1.0 - Tag/Commit_id/Version_Number
			index.html				index.html_v1.1			# v1.0 - Tag/Commit_id/Version_Number
			index.html				index.html_v1.2	
			index.html				index.html_v1.3	
			index.html				index.html_v1.4	
			index.html				index.html_v1.5	
			
	Type of Version Control System :
	
		- Local VCS 
		
		- Centralized VCS 
		
		- Distributed VCS 
		
		
	GIT ::
	
		- GIT is Open-Source Distributed VCS.
		- Is used to Version Control the Source Code Changes.
		- Is used to track the Source Code Changes.		
		- Is used to perform parallel development using Branching Techniques.


#######################
Day 3 : 18th Dec. 2024
#######################		

	- GIT File WorkFlow 
	- Install GIT Client and work with GIT Cli Commands 
	- GIT Branching Techniques
	- Remote Repositories
	

- GIT File WorkFlow 

	Local Machine																							Remote Server 
	
	Install Git Client 
	
	Working Directory					Staging Area					Local Repository					Remote Repository
	
	index.html 			----------->	index.html		------------->	index.html_v1.0		------------->	index.html_v1.0
						  git add 						  git commit                          git push 

	index.html 			----------->	index.html		------------->	index.html_v1.1		------------->	index.html_v1.1
						  git add 						  git commit                          git push 
						  
						  
- Developers' Workload :

	- Enhancement Project / Bugfixing 
	- New Project
	
	
	GIT Cli Commands :
	
	
		git clone				# To copy/clone the entire Remote Repository to Local Machine
	
		git add 				# To Add the changes from Working Directory to Staging Area 
		
		git commit 				# To permanantly commit the changes from Staging Area to Local Repository
		
		git push				# To Push the Changes from Local Repository to Remote Repository
		
		git pull/git fetch 		# Both git pull and get fetch are used to handle the incremental changes from Remote Repository
		
					# git fetch ::
							- Is used just check for the incremental changes in Remote Repository, if there are any changes exist, it will update the details only in the Local Repository. git fetch will not update the changes in working directory. From Local Repository, using git pull/merge we can update the details in the working directory.
		

					# git pull ::
							- Is used check for the incremental changes in Remote Repository, if there are any changes exist, it will update the details in the Local Repository as well in the working directory. 		
							
							- git pull is always recommended to keep the Local Repository in-sync with Remote Repository
							
							git pull = git fetch + git merge
							
		
		Fork 					# To Backup/Copy one Remote Repository to another Remote Repository
		
		
		git init 				# Initialize a Local Repository
								# git init will create a default branch called master/main
								# git init will create .GIT! Directory								
								
								# Branch is the logical copy of a repository/branch used to perform parallel development
								
								
	Working with Local Git Repositories :::
							
	In Local Machine - Install Git Client 	
		# https://git-scm.com/downloads

		Working Directory					Staging Area					Local Repository

		index.html 			----------->	index.html		------------->	index.html_v1.0	
							  git add 						  git commit                     
							  
					
		Windows Users :
						64-bit Git for Windows Setup.
						
						GIT Bash		####
						GIT CMD 
						GIT GUI
						
			git --version 		# Linux/Mac Users - Run this command from terminal and chk the version of git.
			git --version 		# Windows Users - Run this command from git bash terminal and chk the version of git.
			
		
		Project Workspace/Folder :
		
		cd d:
		mkdir EDU-DCP-Dec16-2024
		cd EDU-DCP-Dec16-2024
		mkdir Repo1
		mkdir Repo2
		mkdir Repo3 
		
		cd Repo1
		
		
	Working with git cli Commands :::
	
	
	git init 	
	
	git status	
	
	git add 	
	
	git commit 
	
	git log 
	
	
	git configuration :
	
		GIT Local Configuration :			# It is applicable within a specific repository
		
			git config user.name "Loksai"			
			git config user.email "loksai@asdf.com"
		
		GIT Global Configuration :			# It is applicable to all the specific repositories
		
			git config --global user.name "Loksai"			
			git config --global user.email "loksai@asdf.com"	


		install git 
		
		open git bash 

		git init 	
				git config --global user.name "Loksai"			
				git config --global user.email "loksai@asdf.com"	
		
		git add 
		
		git commit 
	
	
	
	
		GIT ADD :
		
			git add q1.txt
			
			git add q1.txt s1.java
			
			git add *.java 
			
			git add .					# Used to add all the changes from working directory to staging area!
	
	
		Unstaging :
		
			git rm --cached 			# Remove the Changes from staging Area. The Changes will be back to Working Directory
										# This is always recommended.
			
			git rm -rf 					# Remove the Changes from staging Area as well as from Working Directory
	
		
		GIT LOG :						# Used to get the list of commits!
		
			git log 
			
			git log -1
			
			git log --oneline 
			
			git log --oneline -2 
			
			git log --stat -1
			
		
		git show <commit_id>
		
		git show -1
		
		git diff 						# Check the difference between Work Directory and Local Repository Changes.
		
  501  git --version
  502  clear
  503  pwd
  504  cd d:
  505  clear
  506  pwd
  507  mkdir DCP-Dec16-2024
  508  cd DCP-Dec16-2024/
  509  clear
  510  pwd
  511  mkdir repo1
  512  ls
  513  cd repo1/
  514  clear
  515  pwd
  516  clear
  517  ls
  518  ls -a
  519  git init
  520  ls -a
  521  ls
  522  cd .git/
  523  ls
  524  clear
  525  cd ..
  526  ls
  527  git status
  528  echo "rec1" >> file1.txt
  529  cat file1.txt
  530  git status
  531  git add file1.txt
  532  git status
  533  git commit -m "Created file1.txt"
  534  git status
  535  git log
  536  echo "rec1" >> file2.txt
  537  git status
  538  git add file2.txt
  539  git status
  540  git commit -m "Created file2.txt"
  541  git status
  542  git log
  543  ls
  544  cat file1.txt
  545  echo "rec2" >> file1.txt
  546  cat file1.txt
  547  git status
  548  git add  file1.txt
  549  git commit -m "Updated file1.txt"
  550  git log
  551  cd ..
  552  pwd
  553  ls
  554  mkdir repo2
  555  cd repo2/
  556  git init
  557  cd ..
  558  ls
  559  cd repo1/
  560  git log
  561  git config user.name "Loksai"
  562  echo "rec1" >> q1.txt
  563  git add .
  564  git commit -m "Created q1.txt"
  565  git log
  566  cd ..
  567  ls
  568  cd repo2/
  569  git status
  570  echo "rec1" >> file1.txt
  571  git add .
  572  git commit - "Created file1.txt"
  573  git log
  574  ls
  575  git status
  576  git commit -m "Created file1.txt"
  577  git log
  578  cd ..
  579  git config
  580  clear
  581  ls
  582  mkdir repo3
  583  ls
  584  cd repo3/
  585  git init
  586  clear
  587  echo "rec1" >> f1.txt
  588  git add f1.txt
  589  git status
  590  echo "rec1" >> f2.txt
  591  git add f2.txt
  592  git status
  593  //git commit -m Created f1 and f2 files"
  594  git commit -m "Created f1 and f2 files"
  595  clear
  596  ls
  597  git status
  598  echo "rec1" >> q1.txt
  599  git status
  600  echo "rec1" >> q2.txt
  601  echo "rec1" >> q3.txt
  602  echo "rec1" >> s1.java
  603  echo "rec1" >> s2.java
  604  echo "rec1" >> s3.java
  605  echo "rec1" >> w1.doc
  606  echo "rec1" >> w2.doc
  607  echo "rec1" >> w3.doc
  608  echo "rec1" >> t1.md
  609  echo "rec1" >> t2.md
  610  echo "rec1" >> t3.md
  611  git status
  612  git add q1.txt s1.java
  613  git status
  614  git add *.java
  615  git status
  616  git add *.md q2.txt
  617  git status
  618  git add .
  619  git status
  620  git rm --cached q1.txt
  621  git status
  622  git rm -rf q2.txt
  623  ls
  624  git status
  625  git commit -m "Created few files!"
  626  git status
  627  git add .
  628  git commit -m "Created q1.txt"
  629  git log
  630  echo "rec1" >> l1.txt
  631  git add .
  632  git commit -m "Created l1.txt"
  633  echo "rec1" >> l2.txt
  634  git add .
  635  git commit -m "Created l1.txt"
  636  echo "rec1" >> l3.txt
  637  git add .
  638  git commit -m "Created l1.txt"
  639  clear
  640  git log
  641  git log
  642  clear
  643  git log
  644  git log -3
  645  git log -2
  646  git log -1
  647  git log --oneling
  648  git log --oneline
  649  git log --oneline -3
  650  git log --oneline -2
  651  clear
  652  git log
  653  git log --oneline
  654  git show 8283e97
  655  git log --oneline
  656  git show 3ee2fb2
  657  clear
  658  git log --stat -2
  659  git log -2
  660  git show -2
  661  clear
  662  git log --stat -1
  663  git show -1
  664  clear
  665  git status
  666  git diff
  667  ls
  668  cat f1.txt
  669  echo "record2" >> f1.txt
  670  cat f1.txt
  671  git status
  672  git diff
  673  git add .
  674  git commit -m "Updated f1.txt"
  675  clear
  676  git log --oneline
  677  git diff e87fcd6 3ee2fb2
  678  git log --oneline
  679  clear
  680  git status
  681  echo "ca" >> k1.txt
  682  git status
  683  git add .
  684  git status
  685  git commit -m "adsf"
  686  clear
  687  cd ..
  688  history


		
#######################
Day 4 : 19th Dec. 2024
#######################		

	- gitignore 
	
	- git reset 
	
	- git revert 
		
	- git Branching Techniques

	- git stash
	
	- Handle Remote GITHUB Repositories
	

	- gitignore :::
		- Is used to ignore the files from tracking.
		- To implement this, create.gitignore file and maintain all the files and file pattern to be ignored.
		- As a best practise, .gitignore should be the very first commit in any repository.
	
	
		Local Machine																					Remote Server 
		
		Working Directory					Staging Area				Local Repository				Remote Repository
		
		Java_Web_APP_Project - Folder/Workspace 
		
			- src
				- main
					*.java 
				- test 
					*.java
			- resource 
				- index.html
				- *.css 
				- *.js 		
			- target 
				- *.war
			DB_Crentials
			Secrets
			App_Password
			application.properties
			
			
		ls 						# Basic Linux Command to get the list of files & Directories 
		git ls-files			# Git Cli Command to get the list of files & Directories that are being tracked
		
		
	- git reset ::
	
		- Is used undo the committed Changes from Repository
		- git reset will reset the HEAD Pointer to previous commit point
		- git reset will NOT Create any Commit to track the changes.
		- It is not recommended to use git reset in the shared repositories.
		
		Syntax :
		
			git reset <reset_option> <previous_commit_id>
			
			
			git reset --soft <previous_commit_id> ::
			
					- It will take the changes back to staging area.
					- It will move the HEAD Pointer to the previous_commit_id
					- The change will be removed from local repository, but it is available in staging area as well as in the working directory. 
					- It will NOT Create any Commit to track the changes.
			
			git reset --mixed <previous_commit_id> ::			# Default
			
					- It will take the changes back to working directory.
					- It will move the HEAD Pointer to the previous_commit_id
					- The change will be removed from local repository, but it is available in the working directory.
					- It will NOT Create any Commit to track the changes.					
	
			git reset --hard <previous_commit_id> ::
			
					- It will permanantly remove the changes from Local Repo and working directory.
					- It will move the HEAD Pointer to the previous_commit_id
					- It is a permanant removal of the changes. 
					- It will NOT Create any Commit to track the changes.

			ETL :::
			
				Repo1 --> transfered to DataBase -->
							
	- git revert :::
	
		- git revert is same as git reset --hard.
		- But, the difference is git revert will create a new commit point for tracking 
		- With this the Commit History will be maintained all the time. 
		- git revert can be used to revert any specific commit point.
		- It is recommended to use git revert in the shared repositories.
		
		Syntax :
			
			git revert <specific_commit_id>
			
			
	
	- git Branching Techniques :::
		
			- Is used to perform parallel development.

			
		- Branching Strategies :
			
			- Is used to perform parallel development.
			- Is used to maintain integrity of the master branch.
			- Branches are the logical copy of any Branch(master)
			
			
		Repo1 :
		
			master : cm1,cm2,cm3
			
				feature1 : cm1,cm2,cm3,f1cm1,f1cm2,f1c3
				
				
		Scenario 1 :
		
			Repo1
				master : rel1,rel2
							rel1,rel2,rel3 				# rel3 upon merging feature1
							
				
					feature1 : rel1,rel2,f1cm1,f1cm2,f1c3

		Scenario 2 :
		
			Repo1
				master : rel1,rel2

						rel1,rel2,rel3								# rel3 is combination of all features merged thru Developer_Branch1
				
					Developer_Branch1 : rel1,rel2	
					
								rel1,rel2,f1cm1,f1cm2,f1c3,f2cm1,f2cm2,f2c3					# Upon Merging feature1 & feature2

						feature1 : rel1,rel2,f1cm1,f1cm2,f1c3
						
						feature2 : rel1,rel2,f2cm1,f2cm2,f2c3
				
		Scenario 3 :
		
			Repo1
				master : rel1,rel2

						rel1,rel2,rel3						# rel3 is combination of all Developer_Branch merged thru Integration_Branch
						
					Integration_Branch : rel1,rel2
									
									rel1,rel2,Developer_Branch1_Changes,Developer_Branch2_Changes
							
				
						Developer_Branch1 : rel1,rel2	
						
									rel1,rel2,f1cm1,f1cm2,f1c3,f2cm1,f2cm2,f2c3					# Upon Merging feature1 & feature2

							feature1 : rel1,rel2,f1cm1,f1cm2,f1c3
							
							feature2 : rel1,rel2,f2cm1,f2cm2,f2c3	
		

						Developer_Branch2 : rel1,rel2	
						
									rel1,rel2,f1cm1,f1cm2,f1c3,f2cm1,f2cm2,f2c3					# Upon Merging feature1 & feature2

							feature1 : rel1,rel2,f1cm1,f1cm2,f1c3
							
							feature2 : rel1,rel2,f2cm1,f2cm2,f2c3	
				

		Scenario 4 :
		
			Repo1
				master : rel1,rel2

						rel1,rel2, rel3											# Upon Merging Release_Branch.
	
					Release_Branch : rel1,rel2
										
									rel1,rel2,Team1_Changes,Team2_Changes						# Upon Merging Changes from Team1 & Team2 
									
						
						Integration_Branch1 : rel1,rel2																# Team1
										
										rel1,rel2,Developer_Branch1_Changes,Developer_Branch2_Changes							
					
							Developer_Branch1 : rel1,rel2	
							
										rel1,rel2,f1cm1,f1cm2,f1c3,f2cm1,f2cm2,f2c3					# Upon Merging feature1 & feature2

								feature1 : rel1,rel2,f1cm1,f1cm2,f1c3
								
								feature2 : rel1,rel2,f2cm1,f2cm2,f2c3	
			

							Developer_Branch2 : rel1,rel2	
							
										rel1,rel2,f1cm1,f1cm2,f1c3,f2cm1,f2cm2,f2c3					# Upon Merging feature1 & feature2

								feature1 : rel1,rel2,f1cm1,f1cm2,f1c3
								
								feature2 : rel1,rel2,f2cm1,f2cm2,f2c3	

						Integration_Branch2 : rel1,rel2																# Team2
										
										rel1,rel2,Developer_Branch1_Changes,Developer_Branch2_Changes							
					
							Developer_Branch1 : rel1,rel2	
							
										rel1,rel2,f1cm1,f1cm2,f1c3,f2cm1,f2cm2,f2c3					# Upon Merging feature1 & feature2

								feature1 : rel1,rel2,f1cm1,f1cm2,f1c3
								
								feature2 : rel1,rel2,f2cm1,f2cm2,f2c3	
			

							Developer_Branch2 : rel1,rel2	
							
										rel1,rel2,f1cm1,f1cm2,f1c3,f2cm1,f2cm2,f2c3					# Upon Merging feature1 & feature2

								feature1 : rel1,rel2,f1cm1,f1cm2,f1c3
								
								feature2 : rel1,rel2,f2cm1,f2cm2,f2c3	
								
								
		- Create Branch 
		- Merge the Changes 
		- Handle the Merge Conflicts 
		- Best Practise
		
		git branch 							# List the Branches 
		
		git branch <New_Branch_Name>		# Create New_Branch 
		
		git switch -c New_Branch_Name 		# Create New_Branch & Switch to that branch 
		
		git switch master 
		
		git merge feature3					# Used to Merge the Changes to the Target Branch
											# Run the command from the target branch 

  501  cd d:
  502  ls
  503  cd DCP-Dec16-2024/
  504  clear
  505  ls
  506  mkdir testrepo1
  507  cd testrepo1/
  508  clear
  509  git init
  510  ls
  511  ls -a
  512  git status
  513  vi .gitignore
  514  git status
  515  git add .
  516  git commit -m "Intial Commit - for .gitignore"
  517  clear
  518  ls
  519  ls -a
  520  cat .gitignore
  521  ls
  522  echo "rec1" >> s1.java
  523  git status
  524  echo "rec1" >> sample.txt
  525  git status
  526  ls
  527  git add .
  528  git ls-files
  529  ls
  530  git ls-files
  531  git log --oneline
  532  git status
  533  git commit -m "CReated s1.java"
  534  git ls-files
  535  ls
  536  git log
  537  clear
  538  ls
  539  git log
  540  cd ..
  541  clear
  542  ls
  543  mkdir testrepo2
  544  cd testrepo2/
  545  git init
  546  clear
  547  git status
  548  clear
  549  echo "dbcred" >> .gitignore
  550  git add .
  551  git commit -m "Intial Commit"
  552  clear
  553  git log --oneline
  554  ls
  555  echo "rec1" >> f1.txt
  556  git add .
  557  git commit -m "CM1"
  558  echo "rec1" >> f2.txt
  559  git add .
  560  git commit -m "CM2"
  561  echo "rec1" >> f3.txt
  562  git add .
  563  git commit -m "CM3"
  564  echo "rec1" >> f4.txt
  565  git add .
  566  git commit -m "CM4"
  567  echo "rec1" >> f5.txt
  568  git add .
  569  git commit -m "CM5"
  570  clear
  571  git log --oneline
  572  ls
  573  git ls-files
  574  git status
  575  git reset --soft 7378d26
  576  git status
  577  ls
  578  git ls-files
  579  git log --oneline
  580  git commit -m "CM5.1"
  581  git status
  582  ls
  583  git ls-files
  584  git log --oneline
  585  git reset --mixed 7378d26
  586  git status
  587  ls
  588  git ls-files
  589  git add .
  590  git commit -m "CM5.2"
  591  git status
  592  ls
  593  git ls-files
  594  git log --oneline
  595  git reset --hard 7378d26
  596  git status
  597  ls
  598  git ls-files
  599  git log --oneline
  600  git reset --hard a1b0a82
  601  git log --oneline
  602  ls
  603  git reset --hard 7ecaf18
  604  git log --oneline
  605  ls
  606  git ls-files
  607  clear
  608  git log --oneline
  609  echo "rec1" >> l1.txt
  610  git add .
  611  git commit -m "CM1"
  612  clear
  613  echo "rec1" >> l2.txt
  614  git add .
  615  git commit -m "CM2"
  616  echo "rec1" >> l3.txt
  617  git add .
  618  git commit -m "CM3"
  619  echo "rec1" >> l4.txt
  620  git add .
  621  git commit -m "CM4"
  622  echo "rec1" >> l5.txt
  623  git add .
  624  git commit -m "CM5"
  625  clear
  626  git log --oneline
  627  ls
  628  git show 40ae315
  629  git revert 40ae315
  630  ls
  631  git ls--files
  632  git ls-files
  633  clear
  634  git log --oneline
  635  git show 7212f2e
  636  git revert 7212f2e
  637  ls
  638  git log --oneline
  639  clear
  640  cd .
  641  cd ..
  642  mkdir testrepo3
  643  cd testrepo3
  644  git init
  645  clear
  646  git branch
  647  echo "rec1" >> f1.txt
  648  git add .
  649  git commit -m "cm1"
  650  clear
  651  git branch
  652  git log --oneline
  653  ls
  654  git branch feature1
  655  git branch
  656  git branch feature2
  657  git branch
  658  git switch feature1
  659  git switch master
  660  git log --oneline
  661  git switch feature1
  662  git log --oneline
  663  ls
  664  cd ..
  665  cd testrepo3/
  666  git switch master
  667  git switch -c feature3
  668  git log --oneline
  669  echo "Rec1" >> k1.txt
  670  git status
  671  git add .
  672  git commit -m "f3cm1"
  673  git log --oneline
  674  ls
  675  git switch master
  676  ls
  677  ls
  678  git log --oneline
  679  git merge feature3
  680  ls
  681  git log --oneline
  682  cd ..
  683  history


#######################
Day 5 : 20th Dec. 2024
#######################	

	Working GIT Branches
	
	Remote Repositories
	
	
	- Merge Conflict ::
	
		- When more than one user/feature try to update the same file at the same record level, Merge conflict occurs in the target branch.
	
	
	- How to fix Merge Conflict Merge Conflict ?
	
		1. Identify the file(s) causing the Merge Conflict 
		2. Open and review the file content
		3. Upon review, decide which record should be retained or deleted from that file
		4. Open the File in edit mode, and delete the header and footer lines, and update the file with required records and save it.
		5. perform git add and commit to the target branch 	
		
	- As per DevOps Strategies, 
	
		- Prevent the Merge Conflicts!
		

	- GIT Rebase :::

	
		- Git Rebase is used to keep the Current Branch in-sync with the target branch.
		- Git Rebase is used to maintain the Linear Commit History in the Target Branch.
		- As a best practise, it is always recommended to use rebase before merge action.
		
		- With this, we can prevent merge conflicts in the target branch(master).
		
		
		Repo1 :
		
			master: cm1,cm2,cm3 
					
					cm1,cm2,cm3,f1cm1,f1cm2,f1cm3			# Upon Merging feature1
					
					cm1,cm2,cm3,f2cm1,f2cm2,f2cm3,f1cm1,f1cm2,f1cm3			# Upon Merge feature2 without proper rebase.
					
					cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3			# Upon Merge feature2 with proper rebase.
			
			
				feature1: cm1,cm2,cm3 
				
					cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
					
					git switch master 
					
					git merge feature1 
					
					
				
				feature2: cm1,cm2,cm3 
				
					cm1,cm2,cm3,f2cm1,f2cm2,f2cm3
					
					git rebase master 							# Should be executed from current branch 
		
					cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3
					
					git switch master 
					
					git merge feature2 							# Should be executed from target branch 	
					
					
	- GIT Merge --squash :::
	
	
		- It is used to Combine more than one one into single commit point. 
		- This adds the changes from current branch to the staging area of target branch
		- Give explicit Commit in the target branch.
		
		
		Repo1 :
			master : cm1,cm2,cm3 
				
					cm1,cm2,cm3,f1cm1,2,3,4,5,6,7,8,9,.......................
			
			feature1: cm1,cm2,cm3,f1cm1,2,3,4,5,6,7,8,9,.......................
	
			git switch master 
            
		    git merge --squash feature1 
			
	
	- GIT Cherry-Pick ::
	
			- Used to Merge the specific commit into the target branch 
			- GIT Cherry-Pick is NOT Recommended to use.
			
		git cherry-pick <commit_id> <commit_id>
		
	

	- git commit :::
	
		git commit -m "Commit Messages" 
		
		git commit -m "CR1001 - Updated payment module" 		
		
		git commit -m "UserStoryID# - Updated payment module" 		
		
		git commit -m "asdfasdfasdf"

		git commit --amend -m "Valid Commit Message!"


	GIT STASH :::	
	
		- Is used to save the uncommitted Changes to a temporary area!
		
		git stash list 				# To list the entries from stash list.
		
		git stash save "Messasge"	# To create a stash entry in the stash list.
		
		git stash apply				# To apply the latest entry from stash list, back to staging area 
		
		git stash apply stash@{3}	# To apply a specific entry from stash list, back to staging area
		
		git stash drop				# To delete/remove the latest entry from stash list		
		
		git stash drop stash@{3}	# To delete/remove a specific entry from stash list		
		
		git stash pop 				# To apply a specific entry from stash list, back to staging area 
									# To delete/remove a specific entry from stash list
	
		git stash pop stash@{3}		# To apply a specific entry from stash list, back to staging area 
		                            # To delete/remove a specific entry from stash list
	
		git stash clear				# To Clean-up the Stash List.
									# Permanent removal of all changes from stash list.
		
		
  501  cd d:
  502  ls
  503  cd DCP-Dec16-2024/
  504  clear
  505  ls
  506  mkdir samplerepo1
  507  cd samplerepo1/
  508  clear
  509  git init
  510  echo "rec1" >> f1.txt
  511  git add .
  512  git commit -m "cm1"
  513  clear
  514  git log --oneline
  515  ls
  516  git branch feature1
  517  git branch feature2
  518  git switch feature1
  519  ls
  520  git log --oneline
  521  echo "Rec1" >> s1.txt
  522  git add .
  523  git commit -m "f1cm1"
  524  git switch master
  525  git merge feature1
  526  ls
  527  git log --oneline
  528  cd ..
  529  mkdir samplerepo2
  530  cd samplerepo
  531  cd samplerepo2/
  532  git init
  533  echo "rec1" >> q1.txt
  534  git add .
  535  git commit -m "cm1"
  536  git branch feature1
  537  git branch feature2
  538  git branch
  539  git switch feature1
  540  ls
  541  git log --oneline
  542  cat q1.txt
  543  echo "record2 from feature1" >> q1.txt
  544  cat q1.txt
  545  git add .
  546  git commit -m "f1cm1"
  547  git log --oneline
  548  git switch master
  549  ls
  550  cat q1.txt
  551  git log --oneline
  552  git merge feature1
  553  cat q1.txt
  554  git log --oneline
  555  git switch feature2
  556  cat q1.txt
  557  git log --oneline
  558  echo "record2 from feature2" >> q1.txt
  559  git add .
  560  git commit -m "f2cm1"
  561  git log --oneline
  562  cat q1.txt
  563  git switch master
  564  git merge feature2
  565  cat q1.txt
  566  vi q1.txt
  567  git add .
  568  git commit -m "fixed MC"
  569  clear
  570  ls
  571  cd ..
  572  mkdir samplerepo3
  573  cd samplerepo3/
  574  git init
  575  clear
  576  echo "rec1" >> a1.txt
  577  git add .
  578  git commit -m "cm1"
  579  echo "rec1" >> a2.txt
  580  git add .
  581  git commit -m "cm2"
  582  clear
  583  git log --oneline
  584  ls
  585  git branch feature1
  586  git branch feature2
  587  git log --oneline
  588  git switch feature1
  589  git log --oneline
  590  ls
  591  echo "rec1" >> q1.txt
  592  git add .
  593  git commit -m "f1cm1"
  594  echo "rec1" >> q2.txt
  595  git add .
  596  git commit -m "f1cm2"
  597  echo "rec1" >> q3.txt
  598  git add .
  599  git commit -m "f1cm3"
  600  git log --oneline
  601  git rebase master
  602  git switch master
  603  git merge feature1
  604  ll
  605  git log --oneline
  606  git switch feature2
  607  git log --oneline
  608  echo "rec1" >> w1.txt
  609  git add .
  610  git commit -m "f2cm1"
  611  echo "rec1" >> w2.txt
  612  git add .
  613  git commit -m "f2cm2"
  614  echo "rec1" >> w3.txt
  615  git add .
  616  git commit -m "f2cm3"
  617  git log --oneline
  618  git rebase master
  619  git log --oneline
  620  git switch master
  621  git merge feature2
  622  git log --oneline
  623  git switch feature1
  624  git log --oneline
  625  git rebase master
  626  git log --oneline
  627  git log --oneline
  628  echo "rec1" >> z1.txt
  629  git add .
  630  git commit -m "f1"
  631  echo "rec1" >> z2.txt
  632  git add .
  633  git commit -m "f2"
  634  echo "rec1" >> z3.txt
  635  git add .
  636  git commit -m "f3"
  637  echo "rec1" >> z4.txt
  638  git add .
  639  git commit -m "f4"
  640  echo "rec1" >> z5.txt
  641  git add .
  642  git commit -m "f5"
  643  clear
  644  git log --oneline
  645  git rebase master
  646  ls
  647  git switch master
  648  git merge --squash feature1
  649  git commit -m "combined changes from feature1"
  650  git log --oneline
  651  ls
  652  clear
  653  git switch feature1
  654  git status
  655  git log --oneline
  656  echo "rec1" >> e1.txt
  657  git add .
  658  git commit -m "adsfasd"
  659  git log --oneline
  660  git commit -m "Valid Message!"
  661  git commit --amend -m "Valid Message!"
  662  git log --oneline
  663  clear
  664  git status
  665  echo "rec1" >> k1.txt
  666  git add .
  667  git switch master
  668  git status
  669  git switch feature1
  670  git status
  671  git stash save "for k1.txt"
  672  git stash list
  673  git status
  674  ls
  675  echo "rec1" >> k2.txt
  676  git add .
  677  git stash save "for k2.txt"
  678  git stash list
  679  echo "rec1" >> k3.txt
  680  git add .
  681  git stash save "for k3.txt"
  682  git stash list
  683  echo "rec1" >> k4.txt
  684  git add .
  685  git stash save "for k4.txt"
  686  echo "rec1" >> k5.txt
  687  git add .
  688  git stash save "for k5.txt"
  689  echo "rec1" >> k6.txt
  690  git add .
  691  git stash save "for k6.txt"
  692  echo "rec1" >> k7.txt
  693  git add .
  694  git stash save "for k7.txt"
  695  echo "rec1" >> k8.txt
  696  git add .
  697  git stash save "for k8.txt"
  698  git stash list
  699  ls
  700  git status
  701  git stash apply
  702  ls
  703  git commit -m "k8.txt"
  704  git stash list
  705  git stash drop
  706  git stash list
  707  git status
  708  git stash pop
  709  git stash list
  710  git status
  711  git commit -m "k7.txt"
  712  git stash apply stash@{3}
  713  git stash list
  714  git commit -m "k7"
  715  git stash drop stash@{3}
  716  git stash pop stash@{3}
  717  git stash list
  718  clear
  719  git commit -m "asdfasd"
  720  git status
  721  git stash list
  722  git stash clear
  723  git stash list
  724  echo "rec1" >> jj.txt
  725  git stash save "asdf"
  726  git branch
  727  cd ..
  728  cd ..
  729  clear
  730  history

Next :::
		
	- Remote Repositories :::
	
		- GITHUB :::
		
		How to create Repos in GITHUB 
		
		Pull Request:
		
		clone 
		
		pull / fetch 
	
		push 
	
#######################
Day 6 : 23rd Dec. 2024
#######################	

	Remote Repositories Handling using GitHub and GIT cli
	
		How to create Repos in GITHUB 
		
		Create Remote Branches in Remote Repository
		
		Merge the Changes using Pull Request 
		
		Pull Request:
		
		clone 
		
		pull / fetch 
	
		push 
		
		
		git clone https://github.com/EDU-DCP-Dec16-2024/TestRepo2.git
		
		User Authentication can be enabled using 
			- Access Token.
			
			Create Access TOken from GITHUB Account.
				


		git push -u origin main
		
		
		git clone				# To copy/clone the entire Remote Repository to Local Machine
	
		git add 				# To Add the changes from Working Directory to Staging Area 
		
		git commit 				# To permanantly commit the changes from Staging Area to Local Repository
		
		git push				# To Push the Changes from Local Repository to Remote Repository
		
		git pull/git fetch 		# Both git pull and get fetch are used to handle the incremental changes from Remote Repository
		
					# git fetch ::
							- Is used just check for the incremental changes in Remote Repository, if there are any changes exist, it will update the details only in the Local Repository. git fetch will not update the changes in working directory. From Local Repository, using git pull/merge we can update the details in the working directory.
		

					# git pull ::
							- Is used check for the incremental changes in Remote Repository, if there are any changes exist, it will update the details in the Local Repository as well in the working directory. 		
							
							- git pull is always recommended to keep the Local Repository in-sync with Remote Repository
							
							git pull = git fetch + git merge	


	New Project :
	
		git init 
		
		create empty remote repo 
		
		
		git remote -v 
		
		git remote add origin https://github.com/EDU-DCP-Dec16-2024/TestRepo.git
		
		git remote remove origin
		
  501  cd d:
  502  cd DCP-Dec16-2024/
  503  ls
  504  cd remoterepos
  505  mkdir remoterepos
  506  cd remoterepos/
  507  clear
  508  ls
  509  git clone https://github.com/EDU-DCP-Dec16-2024/TestRepo2.git
  510  ls
  511  cd TestRepo2/
  512  git remove -v
  513  git remote -v
  514  git status
  515  git log --oneline
  516  git switch -c local-feature1
  517  git status
  518  git log --oneline
  519  echo "rec1" >> local-file1.txt
  520  git add
  521  git add .
  522  git commit -m "create local-file1.txt"
  523  git status
  524  git log --oneline
  525  git push -u origin main
  526  git push -u origin local-feature1
  527  clear
  528  git switch main
  529  git status
  530  ls
  531  git fetch
  532  git status
  533  ls
  534  git pull
  535  ls
  536  git status
  537  git status
  538  git pull
  539  ls
  540  git fetch
  541  git switch -c temp1
  542  ls
  543  clear
  544  cd ..
  545  clear
  546  mkdir testrepo
  547  cd testrepo
  548  git init
  549  echo "rec1" >> l1.txt
  550  git add .
  551  git commit -m "cm1"
  552  clear
  553  ls
  554  git remote -v
  555  ls
  556  git remote add origin https://github.com/EDU-DCP-Dec16-2024/TestRepo.git
  557  git remote -v
  558  git remote remove origin
  559  git remote -v
  560  git remote add origin https://github.com/EDU-DCP-Dec16-2024/TestRepo.git
  561  clear
  562  git branch -M main
  563  git branch -M master
  564  git push -u origin master
  565  cd ..
  566  clear
  567  history

