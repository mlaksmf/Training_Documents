#######################
Day 14 : 07th Jan. 2025
#######################	


	Container Orchestration Tool : Kubernetes
	
	Kubernetes Architecture 
	
	Kubernetes Architecture Components
	
	Terminologies
	
	Kubernetes Concepts :
	
	Install and setup the Kubernetes Cluster
	
	Pods
	Controller Objects 
		- RC 
		- RS 
		- DS 
		- Deployments 
		
	Kubernetes Volumes 
	
	Kubernetes Services 
		- C-IP
		- NP 
		- LoadBalancer 
		
	HELM Package Manager!
	
	
Kubernetes Architecture :::

	Kubernetes ::::
	
		- It is a Open-Source Container Orchestration Tool 
		- Kubernetes is used to Deploy any type of Containers.
		- It is used to ensure high availability of the Applications/services running thru Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- It supports Auto-Scaling & Load Balancing.

	Managed Services :
	
	AWS 	- ECS/ECR/EKS
	Azure 	- ACS/ACR/AKS 
	GCP 	- GCE/GCR/GKE
	
	Kubernetes Architecture :::	
	
	Components ::
	
		Kubernetes Master
			Kubernetes WorkerNode1
			Kubernetes WorkerNode2
			Kubernetes WorkerNode3
			
		- API Server 
		- ETCD 
		- Scheduler
		- Controller Manager 
		
		- Kubelet 
		- CRI - Container RunTime Interface - Container-D 
		- Kube-Proxy
	
	Kubernetes Terminologies & Concepts ::
	
		--> Kubernetes Manifest File 			# Used to define the properties of the pods for deployment. - *.yaml / *.json
		
		--> kubectl								# Command Line Utility - used to interact with Kubernetes Master 
		
		--> Container Images
		
		--> Containers 
		
		--> Container Registry 
		
		--> Pods 								# Smallest / Atomic unit of task 
		
		--> Kubelet								# Kubernetes Agent responsible to deploy the pods 
		
		--> Kubernetes Cluster					# Kubernetes Cluster is the group of WorkerNodes.
		
		
		Kubernetes Master
			Kubernetes-Cluster1
				Kubernetes WorkerNode1
				Kubernetes WorkerNode2
				Kubernetes WorkerNode3
				
		Kubernetes Master
			Kubernetes-Cluster1
				Kubernetes WorkerNode1
				Kubernetes WorkerNode2
				Kubernetes WorkerNode3
			Kubernetes-Cluster2
				Kubernetes WorkerNode1
				Kubernetes WorkerNode2
				Kubernetes WorkerNode3
			Kubernetes-Cluster3
				Kubernetes WorkerNode1
				Kubernetes WorkerNode2
				Kubernetes WorkerNode3

			Kubernetes Master				
				Kubernetes Master1
					Kubernetes-Cluster1
						Kubernetes WorkerNode1
						Kubernetes WorkerNode2
						Kubernetes WorkerNode3
				Kubernetes Master2
					Kubernetes-Cluster1
						Kubernetes WorkerNode1
						Kubernetes WorkerNode2
						Kubernetes WorkerNode3
						
	Install and setup the Kubernetes Architecture ::::

		Kubernetes Master
			Kubernetes WorkerNode1
			Kubernetes WorkerNode2
			
			
	minikube 
	kubeadm 
	
		Kubernetes Master
			Kubernetes WorkerNode1
			Kubernetes WorkerNode2
			
			
	Create Manifest File to Deploy Kubernetes Objects like pods....
	
	
	Pods :::




#######################
Day 15 : 08th Jan. 2025
#######################	

Concepts :
	Pods
	Controller Objects 
		- RC 
		- RS 
		- DS 
		- Deployments 
		
	Kubernetes Volumes 
	
	Kubernetes Services 
		- C-IP
		- NP 
		- LoadBalancer 
		
	HELM Package Manager!	
	
	
	Controller Objects 
		- Replication Controller and Replicaset :::
		
			Both RC and RS are used to create replicas of Pods to ensure high availability of application service.
			It is used to execute specific no. of Pods Instances
			replica - 3 
			
			Replicaset is the enhanced version of Replication Controller
			
			RC - Used the Equal to based Operator 
				
				Pod 
				
					Envi=QA1
					Envi=QA2
					
			
			RS - Used the Set Based Operator
			
					Envi:{QA1,QA2}
					
			RS - Get created automatically when we create Deployment Objects.
			
			
			3 replicas pods :
			
				Scale-up 
				Scale-down 
				
				
		- DaemonSet :::
		
			- Used to Execute a copy of pod in all the available node 
			
			- Monitoring / Logger / reporting tool services
			
			- Whenever we add any new node to cluster, DaemonSet will allocate a pod in that node 
			
			
		- Deployment Controller Object :::

			- Used to Create Replicas of Pods 
			- Scale-up / Scale-down the Pod Instance 
			- Upgrade the Application Service 
			- Downgrade the Application Service 
			- Here, Upgrade & Downgrade can be done without any downtime.
			
			- Deployment Controller used Rolling-Update Strategy for Deployments
			
			- RS created automatically when we create Deployment Objects.
			
			Pods :
			
				Initial Version :::					New Version ::: 
				
				p1	-> v1.1								p1	-> v1.2	
				p2	-> v1.1							
				p3	-> v1.1
			
		
	Kubernetes Services :::
	
		- ClusterIP Service 
		- NodePort					30000 - 32767
		- LoadBalancer 
		
		
	Kubernetes Volumes 		:::
	
		- Used to maintain the persistant data.
		
		Types: 
		
			- hostpath Volume 			--> Same as Container Volume 
										--> This Volume will be create in the Node where the Pods are deployed 
			- configMaps Volume
			- Secret_Volumes
			
			- Persistant Volume &
			- Persistant Volume Claim
		
	
Next :

	- configMaps Volume
	- Secret_Volumes
	
	- Helm Charts 
	
	
Monitoring :::

	
	- Prometheus/Grafana
	
	
Terraform :::

CICD Pipeline 
		
#######################
Day 16 : 09th Jan. 2025
#######################			
	

	- configMaps Volume ::::
	- Secret Volume
	
		-- Type of Kubernetes Volumes 
		
		--> Both ConfigMaps and Secret Volumes are used to pass runtime input files to the Pods 
		--> ConfigMaps are used to share the general data 
		--> Secret Volumes are used to share the sensitive data. Here, the data is encrypted and it can be accessible only within the pod. We cannot access the Data outside the pod.
		
		
	- Namespaces :::
	
		--> Logical Partitions of Kubernetes Cluster.
		--> Logically Isolated path to execute the pods or any Kubernetes Objects
		
		
		Non-Prod ::
		
			dev 
			qa 
			uat 
		
		Non-Prod 
		
		Kubernetes_Master 
		
			Kubernetes_WorkerNode1,2,3,4,5 :::
			
			kubectl create namespace dev
			
			kubectl get pods --namespace=dev
			
			DEV Namespace 
			
			QA Namespace 	--> Protect 
			
			RBAC 		
			
		
		Prod 
		
		Kubernetes_Master 
		
			Kubernetes_WorkerNodes :::
			
			ACTIVE_PROD Namespace 

root@kmaster-node:~/kubernetes# cat nginx-devpod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  namespace: dev
  labels:
    app: nginx
    tier: dev
spec:
  containers:
  - name: nginx-container
    image: nginx
    ports:
    - containerPort: 80
	
	
	
	--> Helm ::::
	
		Package Manager :::
		
			-> Used to install/Un-install/Update the Software Packages in Linux!
			
				apt 
				
				yum 
				
				dnf 
	
		

				Kubernetes Master2
						Kubernetes WorkerNode1
						Kubernetes WorkerNode2
						Kubernetes WorkerNode3,............,100
						
						
		Helm is a package Manager to manage the package for Kubernetes Cluster.
		
		
		Kubernetes : - Open-Source 
		
						-- CUI
						
						-- To Create Kubernetes Dashboard :;
						
							1. Kubernetes-Dashboard 	
							
							2. Prometheus/Grafana
							

# myappsvcdeploy.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: loksai-eta-deploy
  labels:
    app: loksai-eta-deploy-lbl
spec:
  replicas: 3
  selector:
    matchLabels:
      app: loksai-eta-app
  template:
    metadata:
      labels:
        app: loksai-eta-app
    spec:
      containers:
      - name: loksai-eta-container
        image: loksaieta/wd-webapp
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: loksai-eta-np-service
  labels:
    app: loksai-eta-app
spec:
  selector:
    app: loksai-eta-deploy-lbl

  type: NodePort
  ports:
  - nodePort: 31028
    port: 8080
    targetPort: 8080
	

#######################
Day 18 : 13th Jan. 2025
#######################		

	Demo Terraform ::
	
		Terraform State file!
			terraform.tfstate 
				- Create upon very first successful terraform apply
			
	CICD Demo ::: 
	
	Servers :
	
		- Jenkins_Master					# jdk,git,jenkins 
			Jenkins_Slave1					# git,jdk,maven
	
		- Kubernetes_Master					
			Kubernetes_WorkerNode1
			Kubernetes_WorkerNode2
			Kubernetes_WorkerNode3
			
	CICD Pipeline :
	
	Stages :
	
		- SCM_Checkout
		- Application_Build 							# *.war
		- Application_Image_Build						# *.war  ===> AppImage:v1
		- Login to Container Registry 
		- Push the Appln. Image to Container Registry 
		
		- Deploy Appln. Image to Kubernetes Cluster
		
##################################################################

pipeline {

    agent { label 'slave1' }


	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid1')
	}
	
    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/EDU-DCP-Dec16-2024/java-mvn-springbootapp.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Maven Build'
				sh 'mvn clean package'
            }
        }
        stage('Build Docker Image') {
            steps {
				sh 'docker version'
				sh "docker build -t loksaieta/dcp-13-webapp:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/dcp-13-webapp:${BUILD_NUMBER} loksaieta/dcp-13-webapp:latest"
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push loksaieta/dcp-13-webapp:latest"
			}
		}
		stage('Deploy to Kubernetes') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'DCP-13_Kmaster', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f kubedeploy.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}	
            }
		}
    }
}


kubectl create -f kubedeploy.yaml			# Create the kubernetes Object

kubectl apply -f kubedeploy.yaml			# Create/Update the kubernetes Object


