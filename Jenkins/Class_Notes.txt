#######################
Day 6 : 23rd Dec. 2024
#######################	

	- Build Orchestration Tool - Jenkins

	Automate :
	
		- Build the Source Code 	
			- Process of Compiling the Source Code & Create Artifacts(Binaries - *.war/*.jar/*.dll/*.exc) 
		- Perform Unit Testing 
		- Promote the Changes to Further Testing Environments
		- Send Email Notifications to Testing Teams 
		
	Jenkins CICD Pipeline Projects ::
	
	What is Jenkins ?
		- Open-Source Build Orchestration Tool 
		- Used to Automation Application Builds and Deployment and any process automation
		
	Architecture of Jenkins :
	
		Master-Slave Architecture :
	
			Jenkins_Master Node(VM) - 	Install jdk,Jenkins,maven 
										Used to Create Jenkins CICD Pipelines Projects and schedule to run in the slave nodes.
										
				Jenkins_Slave_Node(VM) - Used to Build the application.
				
		Jenkins_Master Node(VM)	: 	Create Jenkins CICD Pipelines Projects and schedule to run in the slave nodes.
									Install jdk, jenkins, git 
									
			Jenkins_Slave_Node1(VM) :	Build Java Applications
			Jenkins_Slave_Node2(VM) :	Build Python Applications
			Jenkins_Slave_Node3(VM) :	Build .Net Applications
			Jenkins_Slave_Node4(VM) :	Build .Ruby Applications
			Jenkins_Slave_Node5(VM) :	Build Angular Applications
			Jenkins_Slave_Node6(VM) :	Build NodeJS Applications
			
	Working with Jenkins :
	
	
		Developers' Perspective : 
	
				- Developers are just the consumers
				- Execute the Jenkins Projects/cancel project/Read


		DevOps Team : 
		
			- Own Jenkins.
			
		Roles & Responsibilities :
		
			- Installation of Jenkins 
			- Plugins Management 
			- Global System Management
			- Tools Management
			- User Management
			- Security Management
			- Credential Management 
			- Create Jenkins Master - Slave Node Setup 
			- Create Jenkins CICD Projects and automations
			- Onboard the application to CICD Pipeline 
			- Trouble-shooting 
			- Back-up and Recovery 
			
	AWS Account :
		- Create Free-tier Account 
		
		- Create Virtual Machines - EC2 Instances - Ubuntu v22.04
			1 VM - 750 Hrs/Month 
			10 VMs - 75 Hrs/Month 
		
		- Connect to VM and manage Jenkins Tools and services
		
			- EC2 Instance Connect using AWS Console 
			
			- SSH Agents :
				Putty
				MobaXterm 					# https://mobaxterm.mobatek.net/download-home-edition.html
													Choose MobaXTerm Installer Edition
													Download *.zip
													Extract and install.
					- Host Name 
					- User Name 
					- Authentication Key
					
			- Terminal (Linux/MAc/Windows)
			
		
			using apt-get / apt package manager install jenkins
		
		
		Jenkins_Master Node(VM)	: 	Create Jenkins CICD Pipelines Projects and schedule to run in the slave nodes.
									Install jdk, jenkins, git 
									
									https://www.jenkins.io/doc/book/installing/


		Jenkins runs as service - used default port 8080
		
Next :

	Install and Setup Jenkins Master Node.


#######################
Day 7 : 24th Dec. 2024
#######################	

			- Host Name 		
			- User Name 
			- Authentication Key
			
	- Installation of Jenkins 
	- Plugins Management 
	- Global System Management
	- Tools Management
	- User Management
	- Security Management
	- Credential Management 
	
	- Create Jenkins CICD Projects and automations
	
		- Create Jenkins Jobs/Projects ::
		
	- Free-Style Projects 
		- Done using manual configurations

		
		Parameterized :
		
		Jenkins Jobs Variables :
		
			- Environment Variables 
			
				"${BUILD_NUMBER}"
				
			
			- User-Defined Variables 
			
			
			
	- Pipeline Projects 
		- Done using scripts - groovy script
		- Pipeline Project composed of various stages
		
		- Scripted Pipelines :
			- 
		
		- Declarative Pipelines :
		
		
	Pipeline
		stages 
			stage1
				steps
					- # Actual Task
			stage2
				steps
					- # Actual Task
			stage3
				steps
					- # Actual Task
					
pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Hello1') {
            steps {
                echo 'Hello World'
            }
        }
    }
}


	- Create Jenkins CICD Projects and automations
	
	Maven Build Tool :
	
		pom.xml 		# To identify the dependencies and plugins used to build the application
		
		maven goal		# To perform the - code compile/test/package
		
						# mvn compile 	- just compile and chk for compilation errors
						# mvn test 		- perform compile and unit test 
						# mvn package	- compile,test and create artifacts
						# mvn clean package 	- clean-up the target folder & create package
		
	
	
pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git <clone_url>
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Build - Compile & Create Artifacts'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to QA Test Server') {
            steps {
                echo 'Deploy the Artifacts to QA Server'
            }
        }
    }
}


#######################
Day 8 : 26th Dec. 2024
#######################	

	- Create Jenkins CICD Pipeline using Master Slave Architecture

	- Environments :
	
		Non-Prod 												Production Environments
	
			- Dev Environment
			- Build Environment
			- Test Environments
				- QA Test
				- UAT Test				===============>			Production Servers
	
	
	Jenkins_Master Node(VM)	: 	Create Jenkins CICD Pipelines Projects and schedule to run in the slave nodes.
								Install jdk, jenkins, git 
								
		Jenkins_Slave1(VM)	: 	Install git, jdk, maven
		(Build Server)			To Perform Application Build and Create Artifacts(*.war)
	
	
	Test-Server 			: 	Install jdk, tomcat


	Create Jenkins Slave Node :
		Launch a VM (ubuntu - 22.0v)
		
		SSH Connection :
		
			Authentication Methods: 
				
				- Password based Authentication
				- Key based Authentication
					- Public Key 
					- Private Key 
				- Token based Authentication
				- Passwordless Authentication
				
				
	Jenkins Node Configuration
	
	

pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/EDU-DCP-Dec16-2024/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Build - Compile & Create Artifacts'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to QA Test Server') {
            steps {
                echo 'Deploy the Artifacts to QA Server'
            }
        }
    }
}



Deployment to Target Server :::

	QA Testing ::
	
	Deployment ????
	
	
	Source Server															Target Server 
	
		Jenkins_Slave1															Tomcat_server 
		
			Source File :
			
				*/target/*.war					============>						/opt/tomcat/webapps/*.war	

	

Publish Over SSH Plugin is used in Jenkins to copy the artifacts 


Next :

	Tomcat Server Deployment
	Build Triggers 	
	EMail Notifications 
	
	Ansible 
	


	
#######################
Day 9 : 27th Dec. 2024
#######################	

	Jenkins_Master Node(VM)	: 	Create Jenkins CICD Pipelines Projects and schedule to run in the slave nodes.
								Install jdk, jenkins, git 
								
		Jenkins_Slave1(VM)	: 	Install git, jdk, maven
		(Build Server)			To Perform Application Build and Create Artifacts(*.war)
	
	
	Test-Server (VM)		: 	Install jdk, tomcat
	
	Tomcat is a Web Application Server - runs in port 8080 


sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])



pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/EDU-DCP-Dec16-2024/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Build - Compile & Create Artifacts'
				sh 'mvn clean package'
            }
        }
        stage('Approve - For Deployment'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "Yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
        stage('Deploy to QA Test Server') {
            steps {
                script{
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }		
    }
}

	How to Automate the Build Triggers ??
	
	
	Build Triggers:
	
		-> Build Periodic :		https://crontab.guru/
		
				- Used to trigger the jenkins jobs irrespective of code change. - It is not meant for CI/CD.
				- The build is sheduled based on the crontab 
				
				Eg.: 
					8AM  - Start Non-Prod Servers 
					
					10PM - Stop Non-Prod Servers 
				
		
		-> Github Webhook 
			
				- Used to trigger the jenkins Job whenever there is any commit happened in the remote repository
				- github webhook has be configured in the remote repository by using the jenkins URL
			
				API URL - http://13.203.157.140:8080/github-webhook/
			
			
		-> Poll-SCM 
			
				- It is used to trigger the build based on the crontab only if there is any changes happened in the source-code repository.
				
				Eg.:
				
				Test Cycles :
				
					8AM - 12PM - 3PM 



	- Email Notifications using Jenkins :::
	
	
	Jobs Status :
	
		- Success 
		- Failure 
		- Unstable
	
	- Configure the Email Server in Jenkins System Configuration.
	
	- Use the Email Notification Plugins in the Post Build Action of the Pipeline Project using Snippet Generator 
	
GMAIL ::



goto manage jenkins -> system configuration 

goto Email Notification 
		
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA --> mobile#

Search for App Password 

Generate App Password = 16 bytes of App Password. vaufsdfsdfgsdfgswer 

What ? window
Which Appln - email			
		



	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/EDU-DCP-Dec16-2024/java-mvn-springbootapp.git'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Build - Compile & Create Artifacts'
				sh 'mvn clean package'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Job Status : "jenkins-${JOB_NAME}-${BUILD_NUMBER}. Please go to ${BUILD_URL} and verify the build"', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Application Build Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Approve - For Deployment'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "Yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
        stage('Deploy to QA Test Server') {
            steps {
                script{
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Deployment Failed ', to: 'l@gmail.com'
                }
                success {
                  sh "echo 'Send mail on Success'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Deployment Successful ', to: 'l@gmail.com'
                }
                unstable {
                  sh "echo 'Send mail on unstable'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Deployment unstable ', to: 'l@gmail.com'
                }
              }
        }		
    }
}


Next :::

	Ansible :::
	
